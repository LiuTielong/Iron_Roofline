"""
这个demo是已知一组verify length, AAT, tree shape的情况下, 计算对应的FPGA上的性能。 
如果已知baseline的性能, 那么就可以计算出加速比。
这里的实例是针对motivation的图去计算在FPGA上的加速比。
注意: 在运行代码的时候需要设置args的mm_parallel_m以及baseline的performance。
"""

import sys
sys.path.append("./")
sys.path.append("../")
import pandas as pd
from roofline.draw import draw_roofline, draw_roofline_discount, draw_acc, draw_combined_model
from modeling.parse_args import parse_args
from modeling.modeling_longspec import longspec_draft_cycles_comp
from modeling.modeling_llama3 import llama3_cycles_comp
import numpy as np

verify_lengths = [
2,
3,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
18,
19,
20,
21,
22,
23,
24,
25,
26,
27,
28,
29,
30,
31,
32,
33,
34,
35,
36,
37,
38,
39,
40,
41,
42,
43,
44,
45,
46,
47,
48,
49,
50,
51,
52,
53,
54,
55,
56,
57,
58,
59,
60,
61,
62,
63,
64,
65,
66,
67,
68,
69,
70,
71,
72,
73,
74,
75,
76,
77,
78,
79,
80,
81,
82,
83,
84,
85,
]
AATs = [
1.74,
2.194,
2.291,
2.396,
2.682,
2.721,
2.775,
2.883,
2.91,
2.93,
3.055,
3.16,
3.214,
3.259,
3.296,
3.326,
3.326,
3.326,
3.387,
3.452,
3.473,
3.493,
3.502,
3.519,
3.531,
3.549,
3.56,
3.587,
3.592,
3.608,
3.615,
3.645,
3.679,
3.708,
3.703,
3.715,
3.724,
3.739,
3.741,
3.753,
3.782,
3.806,
3.833,
3.861,
3.924,
3.935,
3.946,
3.958,
3.975,
3.981,
3.984,
3.986,
3.99,
3.991,
3.993,
3.995,
4.002,
4.015,
4.036,
4.064,
4.075,
4.087,
4.092,
4.103,
4.117,
4.104,
4.129,
4.118,
4.122,
4.136,
4.159,
4.152,
4.167,
4.175,
4.188,
4.192,
4.203,
4.215,
4.219,
4.222,
4.223,
4.226,
4.23,
4.223,
]

tree_shapes = [
"1 0",
"1 1",
"2 1",
"2 2",
"2 2 1",
"3 2 1",
"3 3 1",
"3 3 2",
"4 3 2",
"4 4 2",
"4 4 3",
"4 4 3 1",
"4 5 3 1",
"4 5 3 2",
"4 5 4 2",
"4 6 4 2",
"4 6 5 2",
"4 7 5 2",
"4 8 5 2",
"4 8 5 2 1",
"4 8 5 3 1",
"4 8 6 3 1",
"4 8 7 3 1",
"4 8 8 3 1",
"4 9 8 3 1",
"4 9 9 3 1",
"4 10 9 3 1",
"4 10 9 4 1",
"4 10 10 4 1",
"4 10 10 5 1",
"4 11 10 5 1",
"4 11 10 6 1",
"4 11 11 6 1",
"4 11 11 6 2",
"4 12 11 6 2",
"4 12 11 7 2",
"4 13 11 7 2",
"4 13 12 7 2",
"4 14 12 7 2",
"4 14 12 8 2",
"4 14 12 8 2 1",
"4 14 12 8 3 1",
"4 14 12 8 4 1",
"4 14 12 8 4 2",
"4 15 12 8 4 2",
"4 15 12 9 4 2",
"4 15 12 9 5 2",
"4 15 12 10 5 2",
"4 15 13 10 5 2",
"4 15 13 11 5 2",
"4 16 13 11 5 2",
"4 16 14 11 5 2",
"4 16 14 12 5 2",
"4 16 14 12 6 2",
"4 16 15 12 6 2",
"4 16 15 13 6 2",
"4 16 15 13 7 2",
"4 16 15 13 8 2",
"4 16 16 13 8 2",
"4 16 16 14 8 2",
"4 16 16 14 8 3",
"4 16 16 15 8 3",
"4 16 16 15 9 3",
"4 16 16 16 9 3",
"4 16 16 16 9 4",
"4 16 16 16 10 4",
"4 16 16 16 11 4",
"4 16 16 16 12 4",
"4 16 16 16 13 4",
"4 16 16 16 13 5",
"4 16 16 16 13 6",
"4 16 16 16 14 6",
"4 16 16 16 14 7",
"4 16 16 16 15 7",
"4 16 16 16 15 8",
"4 16 16 16 15 9",
"4 16 16 16 15 10",
"4 16 16 16 15 11",
"4 16 16 16 15 12",
"4 16 16 16 15 13",
"4 16 16 16 15 14",
"4 16 16 16 15 15",
"4 16 16 16 16 15",
"4 16 16 16 16 16",
]

parser = parse_args()
parser.add_argument("--avg_accepted_tokens",    type=int,   default=4   ,     help="the average number of accepted tokens per iteration."         )
parser.add_argument("--gamma",                  type=int,   default=1,        help="it's similar to total_tokens, (depth+1) in eagle algorithm."  )
parser.add_argument("--tree_shape", nargs="+",  type=int, default=[4, 16, 16, 16, 16], help="the tree shape of the draft token tree." )
args = parser.parse_args()
args.batch_size = 1
args.mm_parallel_m = 128

verify_times = []
draft_times = []
for total_token, AAT, tree_shape in zip(verify_lengths, AATs, tree_shapes):
    aat = int(AAT)
    args.tree_shape = [int(x) for x in tree_shape.split()]
    args.prompt_len = 8192
    # 小模型的draft阶段
    _, _, _, fused_draft_cycles = longspec_draft_cycles_comp(args, input_len=aat, kv_len=args.prompt_len, method="tree")
    # 大模型的verify阶段
    _, _, _, fused_verify_cycles = llama3_cycles_comp(args, input_len=total_token, kv_len=args.prompt_len)
    draft_time = fused_draft_cycles / (args.clock_frequency * 1e6)
    verify_time = fused_verify_cycles / (args.clock_frequency * 1e6)
    verify_times.append(verify_time)
    draft_times.append(draft_time)

for verify_time, draft_time, aat in zip(verify_times, draft_times, AATs):
    performance = aat / (verify_time + draft_time)

    speedup = performance / 18.92
    print(f"{speedup:.3f}")